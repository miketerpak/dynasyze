'use strict'

const assert = require('assert')
const cluster = require('cluster')
const cpu_count = require('os').cpus().length
const fs = require('fs')
const mkdirp = require('mkdirp')
const path = require('path')
const redis = require('redis')
const Server = require('./lib/server')


/**
 * CLI Args:
 *  -c [/path/to/conf], --config [/path/to/conf] == Specify custom config file, if no path, copies default config to current directory
 */

const CONFIG_FILENAME = 'config.json'
const cmds = {
    '-h': 'help',
    '--help': 'help',
    '-?': 'help',
    '-c': 'config',
    '--config': 'config',
    '-C': 'cluster',
    '--cluster': 'cluster',
    '-o': 'out',
    '--out': 'out'
}
const dir = path.dirname(process.argv[1])
const cwd = process.cwd()

let args = {}

// Get command line arguments
if (process.argv.length > 2) {
    let argv = process.argv
    for (let i = 2; i < argv.length; ++i) {
        let cmd = cmds[argv[i]]
        let val = argv[i + 1] || true
        if (val[0] === '-') val = true
        if (cmd) {
            args[cmd] = (argv[i+1] && argv[i+1][0] !== '-') ? argv[i+1] : true
        }
    }
} else {
    return loadConfig(path.join(dir, CONFIG_FILENAME))
}

if (args.help !== undefined) {
    let v = require('./package.json').version
    console.log(`DynaSyze - ${v}`)
    console.log('Dynamic image resizing server')
    console.log('')
    console.log('Usage: dynasyze [-c [ PATH | [-o PATH] ] ]')
    console.log('')
    console.log('Options:')
    console.log('-?, -h, --help         Show help')
    console.log('-C, --cluster          cluster the server on each available logical cpu core.')
    console.log('-c, --config [path?]   If path is specified, loads custom config file.')
    console.log('                       If not, makes a copy of the default config file in the current directory.')
    console.log('-o, --out              Destination for config file generated by -c, --config')
    console.log('                       Example: dynasyze -c -o ~/dynasyze/conf.json')
    return
}

if (args.config === null) {
    copyConfig(args.out)
} else if (args.config) {
    loadConfig(args.config)
} else {
    loadConfig(path.join(dir, CONFIG_FILENAME))
}

function copyConfig(_path = CONFIG_FILENAME) {
    if (!path.isAbsolute(_path)) _path = path.join(cwd, _path)
    let format = path.parse(_path)
    let _dir
    
    if (format.ext){
        _dir = format.dir
    } else {
        _dir = _path
        _path = path.join(_path, CONFIG_FILENAME)
    }
    
    mkdirp.sync(_dir)
    fs.createReadStream(path.join(dir, CONFIG_FILENAME)).pipe(fs.createWriteStream(_path))
}

function loadConfig(_path) {
    if (_path && !path.isAbsolute(_path)) _path = path.join(cwd, _path)
    fs.readFile(_path || CONFIG_FILENAME, (err, data) => {
        if (err) throw err
        let config = JSON.parse(data)
        startServer(config)
    })
}

function startServer(config) {
    if (args.cluster && cluster.isMaster) { // clustering
        assert(config.redis != null, 'Cannot enable clustering while using memory cache. Please disable clustering or configure redis.')

        for (let i = cpu_count - 1; i >= 0; --i) cluster.fork()

        return cluster.on('exit', (worker, code, signal) => {
            console.error(`Worker ${worker.process.pid} died!`)
            console.error(code, signal)
            cluster.fork() // Spin up new node
        })
    }

    if (config.redis) config.redis = redis.createClient(config.redis)
    new Server(config).start()
}